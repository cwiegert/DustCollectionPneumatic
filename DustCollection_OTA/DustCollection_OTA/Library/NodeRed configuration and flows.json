[
    {
        "id": "b3475eb191ac1338",
        "type": "tab",
        "label": "Gates",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dd58a77e5217ef71",
        "type": "tab",
        "label": "Dust Collector",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c9ea7ba5a2291640",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "21ee3988d339ed69",
        "type": "mqtt-broker",
        "name": "AnnapurnaNas",
        "broker": "192.168.0.73",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b86789de1bdbcc44",
        "type": "mqtt-broker",
        "name": "Synology Nas",
        "broker": "192.168.0.73",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f6b3d5021b0a07d9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "AnnapurnaNas",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c5f6ba68a2e95fea",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "13eb506dadbcc936",
        "type": "mqtt-broker",
        "name": "Cory - Raspberry pi",
        "broker": "192.168.0.91",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "24ec13a33edb8bf5",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Tool ON",
        "topic": "Dust/Tool On",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "13eb506dadbcc936",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 75,
        "y": 95,
        "wires": [
            [
                "48df7358d5a4a2aa"
            ]
        ]
    },
    {
        "id": "301d17151a9d5ee8",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Turn Dust Collector On",
        "func": "var outletVal = msg.payload[\"outlet\"];\nif (msg.payload && outletVal == true)\n    {\n        var spinDown = msg.payload[\"spinDown\"];\n        var sourceMachine = msg.payload[\"machine\"];   \n        var sourceGate = msg.payload[\"sent Gate\"];\n        msg.payload.on = true;\n        //msg.payload = [];\n        //msg.payload={\n         //   spinDown : spinDown,\n          //  machine  : sourceMachine,\n          //  gate     : sourceGate,\n          //  on       : true};\n    }\n       // msg.topic = \"Dust/Collector On\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 100,
        "wires": [
            [
                "8a786a2efdfe90f9"
            ]
        ]
    },
    {
        "id": "6bcb6d6ac3e30e81",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Request Gate Id's",
        "topic": "Dust/Gate ID",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "13eb506dadbcc936",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 300,
        "wires": [
            [
                "fa6dd956d75cab7b"
            ]
        ]
    },
    {
        "id": "36756df51754d7e0",
        "type": "debug",
        "z": "b3475eb191ac1338",
        "name": "Add Gate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 300,
        "wires": []
    },
    {
        "id": "516d519db0a9f1b2",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Clear All Gates",
        "topic": "Dust/Clear All Gates",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "13eb506dadbcc936",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 240,
        "wires": [
            [
                "4bb0a5abc7fb0a3e"
            ]
        ]
    },
    {
        "id": "4bb0a5abc7fb0a3e",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Reset Gates",
        "func": "flow.set ('gateIDs', []);\nmsg.payload = \"all gate ID's cleared from gateIDs\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 240,
        "wires": [
            [
                "ca49b808947fab0b"
            ]
        ]
    },
    {
        "id": "ca49b808947fab0b",
        "type": "debug",
        "z": "b3475eb191ac1338",
        "name": "clear Array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 890,
        "y": 240,
        "wires": []
    },
    {
        "id": "9abf80db22291ba9",
        "type": "link out",
        "z": "b3475eb191ac1338",
        "name": "Turn Collector Off",
        "mode": "link",
        "links": [
            "e03240742d738347"
        ],
        "x": 615,
        "y": 40,
        "wires": []
    },
    {
        "id": "002db6db87b21a78",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Tool Off",
        "topic": "Dust/Tool Off",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "13eb506dadbcc936",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 40,
        "wires": [
            [
                "aa023a75a7ddaa6b"
            ]
        ]
    },
    {
        "id": "aa023a75a7ddaa6b",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Turn Off Collector JSON",
        "func": "if (msg.payload.outlet == true) {\n    var spinDown = msg.payload[\"spinDown\"];\n    var sourceMachine = msg.payload.outlet;\n    var sourceGate = msg.payload[\"sent Gate\"];\n    var turnOffCollector = {\n        payload: {\n            spinDown: spinDown,\n            machine: sourceMachine,\n            gate: sourceGate,\n            on: true\n        },\n        topic: \"Dust/Collector Off\"\n    };\n}\nreturn turnOffCollector;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 40,
        "wires": [
            [
                "9abf80db22291ba9"
            ]
        ]
    },
    {
        "id": "fa6dd956d75cab7b",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Add a gate to the Array",
        "func": "// Get the new sensor ID from the incoming message\nconst incomingGateId = msg.payload[\"gate_ID\"];\nconst incomingName = msg.payload [\"gate Name\"]\n\n// Get the existing sensor IDs array from context\n//let gateIDs = flow.get('gateIDs') || [];\nlet gateIDs = flow.get('gateIDs');\n// Check if the new sensor ID already exists in the array\nif (!gateIDs.includes(incomingGateId)) \n    {\n        gateIDs.push(incomingGateId);   // register the new gate to the array\n        flow.set('gateIDs', gateIDs); \n    }\nvar index = 0;\ndo {\n        node.warn (\"array values ==> \"+ gateIDs[index]);\n        index++;\n    } while (index < gateIDs.length);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('gateIDs', []);",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            [
                "36756df51754d7e0"
            ]
        ]
    },
    {
        "id": "8252c6204099fe7c",
        "type": "inject",
        "z": "b3475eb191ac1338",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "7229ed5f124e0c1c"
            ]
        ]
    },
    {
        "id": "7229ed5f124e0c1c",
        "type": "mqtt out",
        "z": "b3475eb191ac1338",
        "name": "Ping gate Id's",
        "topic": "Dust/Send Gate ID",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "13eb506dadbcc936",
        "x": 380,
        "y": 600,
        "wires": [],
        "info": "This message is 13 characters long into the arduino\nit's length is calculated on the opic plus the payload\n"
    },
    {
        "id": "5da1e536d37c24ef",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Clear Gate",
        "topic": "Dust/Clear Gate",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "13eb506dadbcc936",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 360,
        "wires": [
            [
                "a102a2c0b2827c23"
            ]
        ]
    },
    {
        "id": "a102a2c0b2827c23",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Clear Gate from Array",
        "func": "// Get the new sensor ID from the incoming message\nconst incomingGateId = msg.payload[\"gate_ID\"];\nconst incomingName = msg.payload [\"gate Name\"]\n\n// Get the existing sensor IDs array from context\nlet gateIDs = flow.get('gateIDs');\n// Check if the new sensor ID already exists in the array\nif (gateIDs.includes(incomingGateId)) \n    {\n        gateIDs = gateIDs.filter(id => id != incomingGateId );\n        flow.set('gateIDs', gateIDs);\n    }\nvar index = 0;\ndo {\n        node.warn (\"array values ==> \"+ gateIDs[index]);\n        index++;\n    } while (index < gateIDs.length);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 360,
        "wires": [
            [
                "e01f5480963b17ab"
            ]
        ]
    },
    {
        "id": "e01f5480963b17ab",
        "type": "debug",
        "z": "b3475eb191ac1338",
        "name": "Clear Gate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 360,
        "wires": []
    },
    {
        "id": "48df7358d5a4a2aa",
        "type": "json",
        "z": "b3475eb191ac1338",
        "name": "Convert to Json Object",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 275,
        "y": 95,
        "wires": [
            [
                "301d17151a9d5ee8"
            ]
        ]
    },
    {
        "id": "f7a159e5112c30ef",
        "type": "mqtt out",
        "z": "b3475eb191ac1338",
        "name": "Is Unique",
        "topic": "Dust/Is Unique",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "13eb506dadbcc936",
        "x": 900,
        "y": 500,
        "wires": []
    },
    {
        "id": "daccc1c4ec4c0f05",
        "type": "switch",
        "z": "b3475eb191ac1338",
        "name": "Did Gate Exist",
        "property": "exists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 440,
        "wires": [
            [
                "1ec018feb57e5c08"
            ],
            [
                "f7a159e5112c30ef"
            ]
        ]
    },
    {
        "id": "5ae78fd3cd3dfe76",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Checking Unique Gate",
        "func": "// Get the existing flow array from context\nlet gateIDs = flow.get('gateIDs');\nvar holder = msg.payload[\"holder\"];\nvar gateId = msg.payload[\"gate Id\"];\nnode.warn (\"value of holder == \" + holder);\nnode.warn (\"value of gateId ==> \" + gateId);\n\n// Check if the payload exists in the array\nif (!gateIDs.includes(gateId)) \n  {\n    node.warn(\"I am in a unique gate situation\");\n    gateIDs.push(gateId);   // register the new gate to the array\n    flow.set('gateIDs', gateIDs); \n    if (gateIDs.includes(holder))\n      {\n        gateIDs = gateIDs.filter(id => id != holder );\n        flow.set('gateIDs', gateIDs);\n      }\n    msg.exists = false;\n    \n  } else \n    {\n        gateIDs = gateIDs.filter(id => id != gateId );\n        let maxGateId = Math.max(...gateIDs);\n        msg.payload[\"gate Id\"] = maxGateId + 1; // Store the maximum sensor ID in the message payload\n        gateIDs.push(maxGateId + 1);\n        flow.set('gateIDs', gateIDs);\n        node.warn(\"I am in a non-unique gate situation\");\n        msg.exists = true;\n}\nvar index = 0;\ndo {\n        node.warn (\"array values ==> \"+ gateIDs[index]);\n        index++;\n    } while (index < gateIDs.length);\n\n// Pass the message to the next node in the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 440,
        "wires": [
            [
                "daccc1c4ec4c0f05"
            ]
        ]
    },
    {
        "id": "1ec018feb57e5c08",
        "type": "mqtt out",
        "z": "b3475eb191ac1338",
        "name": "Gate Exists",
        "topic": "Dust/Not Unique",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "13eb506dadbcc936",
        "x": 910,
        "y": 420,
        "wires": []
    },
    {
        "id": "8f1520a91c508d98",
        "type": "json",
        "z": "b3475eb191ac1338",
        "name": "Convert ",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 260,
        "y": 440,
        "wires": [
            [
                "5ae78fd3cd3dfe76"
            ]
        ]
    },
    {
        "id": "8694aa23cdfb275a",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Register Gate",
        "topic": "Dust/Register Gate",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "13eb506dadbcc936",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 440,
        "wires": [
            [
                "8f1520a91c508d98"
            ]
        ]
    },
    {
        "id": "8a786a2efdfe90f9",
        "type": "link out",
        "z": "b3475eb191ac1338",
        "name": "Collector On",
        "mode": "link",
        "links": [
            "2510b40ce693100f"
        ],
        "x": 685,
        "y": 80,
        "wires": []
    },
    {
        "id": "08c71dc53bb9fbf6",
        "type": "link in",
        "z": "b3475eb191ac1338",
        "name": "Run Maps",
        "links": [
            "7ddcc2445ddaf65b"
        ],
        "x": 755,
        "y": 100,
        "wires": [
            [
                "70a31f474769ba38"
            ]
        ]
    },
    {
        "id": "70a31f474769ba38",
        "type": "mqtt out",
        "z": "b3475eb191ac1338",
        "name": "Run Gate Maps",
        "topic": "Dust/Run Gates",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "21ee3988d339ed69",
        "x": 920,
        "y": 100,
        "wires": []
    },
    {
        "id": "35c3c988e2c6a10f",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Close All Gates",
        "topic": "Dust/Close All Gates",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "13eb506dadbcc936",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 180,
        "wires": [
            [
                "ec8a56b18289805b"
            ]
        ]
    },
    {
        "id": "ec8a56b18289805b",
        "type": "mqtt out",
        "z": "b3475eb191ac1338",
        "name": "Close Gates",
        "topic": "Dust/Close Me",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "13eb506dadbcc936",
        "x": 330,
        "y": 180,
        "wires": []
    },
    {
        "id": "e03240742d738347",
        "type": "link in",
        "z": "dd58a77e5217ef71",
        "name": "Collector Off",
        "links": [
            "9abf80db22291ba9"
        ],
        "x": 25,
        "y": 320,
        "wires": [
            [
                "96cff7d099b400cf"
            ]
        ]
    },
    {
        "id": "f140c3c0f46abc3e",
        "type": "rpi-gpio out",
        "z": "dd58a77e5217ef71",
        "name": "Collector Power",
        "pin": "24",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 880,
        "y": 140,
        "wires": []
    },
    {
        "id": "2510b40ce693100f",
        "type": "link in",
        "z": "dd58a77e5217ef71",
        "name": "Turn Collector On",
        "links": [
            "8a786a2efdfe90f9"
        ],
        "x": 115,
        "y": 80,
        "wires": [
            [
                "b50b28de4dd7632f"
            ]
        ]
    },
    {
        "id": "b50b28de4dd7632f",
        "type": "function",
        "z": "dd58a77e5217ef71",
        "name": "Set Flow Vars",
        "func": "//check to make sure there is not a machine already controlling the collector\n\nif (flow.get(\"machine\") == undefined || flow.get (\"machine\") == null)\n    {\n        flow.set(\"timer\", 0);\n        flow.set (\"offDelay\", msg.payload.spinDown);\n        flow.set (\"machine\" , msg.payload.machine);\n        flow.set(\"GateId\", msg.payload[\"sent Gate\"]);\n        flow.set (\"collectorState\", msg.payload.on);\n\n        node.warn(msg.payload.on);\n        node.warn(msg.payload.spinDown);\n        node.warn (\"machine ==> \" + flow.get(\"machine\"));\n        node.warn (\"gateID == \" + flow.get(\"GateId\"));\n        node.warn(\" gate in set flow ==> \"+ msg.payload[\"sent Gate\"]);\n        node.warn(msg.payload);\n        return msg;\n    }\nelse\n    {\n        return false;\n    }\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": [
            [
                "29e3b1ede73faca7"
            ]
        ]
    },
    {
        "id": "29e3b1ede73faca7",
        "type": "switch",
        "z": "dd58a77e5217ef71",
        "name": "",
        "property": "payload.on",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 80,
        "wires": [
            [
                "8c87f84554bd0325",
                "7ddcc2445ddaf65b",
                "1e5d114a8bc88f5b"
            ],
            [
                "e1dc4628819af4ac"
            ]
        ]
    },
    {
        "id": "96cff7d099b400cf",
        "type": "function",
        "z": "dd58a77e5217ef71",
        "name": "Store Delay",
        "func": "var startTime = flow.get(\"timer\");\n\nflow.set (\"delayShutdown\", msg.payload.spinDown);\nif (startTime == 0)\n    {\n      flow.set(\"timer\", Math.floor(Date.now() / 1000)); \n     // flow.set (\"timer\", Date.now()); \n      //node.warn(\"startTime was 0, setting it to now\");\n    }\n    \nmsg.delay = flow.get(\"delayShutdown\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 320,
        "wires": [
            [
                "92925f6df9751968"
            ]
        ]
    },
    {
        "id": "92925f6df9751968",
        "type": "function",
        "z": "dd58a77e5217ef71",
        "name": "Calculate Elapsed Time",
        "func": "var startTime = flow.get(\"timer\");\nvar currentTime = Math.floor(Date.now() / 1000);\n//var currentTime = Date.now();\nvar elapsedTime = currentTime - startTime;\n\nnode.warn (\"Seconds since reset ==> \" + elapsedTime);\nif (elapsedTime > flow.get(\"delayShutdown\"))\n    {\n        msg.payload = true;             //stop the collector\n    // clear out the flow variables to allow for another machine to use \n    //  the flow control here.    This will clear for the Set Flow Vars node\n        flow.set (\"offDelay\", null);\n        flow.set (\"machine\" , null);\n        flow.set(\"GateId\", null);\n        flow.set (\"collectorState\", null);\n    }\nelse\n    {\n        msg.payload = false;\n    }\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "e0126a000faf35fb"
            ]
        ]
    },
    {
        "id": "8c87f84554bd0325",
        "type": "change",
        "z": "dd58a77e5217ef71",
        "name": "Turn On",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 160,
        "wires": [
            [
                "f140c3c0f46abc3e"
            ]
        ]
    },
    {
        "id": "e1dc4628819af4ac",
        "type": "change",
        "z": "dd58a77e5217ef71",
        "name": "Turn Off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 220,
        "wires": [
            [
                "f140c3c0f46abc3e"
            ]
        ]
    },
    {
        "id": "827333da1b306ddc",
        "type": "mqtt out",
        "z": "dd58a77e5217ef71",
        "name": "OFF",
        "topic": "Dust/OFF",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "13eb506dadbcc936",
        "x": 730,
        "y": 320,
        "wires": []
    },
    {
        "id": "ee453e7a9a435fc0",
        "type": "mqtt in",
        "z": "dd58a77e5217ef71",
        "name": "Reset Timer",
        "topic": "Dust/Reset Tool Timer",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "13eb506dadbcc936",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "d7ca3d687450a8d4"
            ]
        ]
    },
    {
        "id": "d7ca3d687450a8d4",
        "type": "function",
        "z": "dd58a77e5217ef71",
        "name": "Reset Timer",
        "func": "\n//check to see if this is the first time setting the variables, \n//  it may be the pin on the NodeMCU is not configured correctly\nif (flow.get(\"machine\") == undefined || flow.get (\"machine\") == null)\n    {\n        node.warn (\"I fell into the undefined and null\");\n        return msg;\n    }\nif (flow.get(\"machine\") == msg.payload.machine && flow.get(\"GateId\") == msg.payload[\"sent Gate\"])\n    {\n        node.warn (\"I am resetting the timer\");\n        node.warn (\"value of timer ==> \" + flow.get(\"timer\"));\n        flow.set (\"timer\", 0);\n    }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e0126a000faf35fb",
        "type": "switch",
        "z": "dd58a77e5217ef71",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 320,
        "wires": [
            [
                "827333da1b306ddc",
                "e1dc4628819af4ac"
            ]
        ]
    },
    {
        "id": "7ddcc2445ddaf65b",
        "type": "link out",
        "z": "dd58a77e5217ef71",
        "name": "Run Gate Maps",
        "mode": "link",
        "links": [
            "08c71dc53bb9fbf6"
        ],
        "x": 635,
        "y": 40,
        "wires": []
    },
    {
        "id": "1e5d114a8bc88f5b",
        "type": "mqtt out",
        "z": "dd58a77e5217ef71",
        "name": "Set IsOn Variable",
        "topic": "Dust/ToolIsOn",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "13eb506dadbcc936",
        "x": 810,
        "y": 80,
        "wires": []
    },
    {
        "id": "3e4b7a95.5e6d7c",
        "type": "trigger",
        "z": "c9ea7ba5a2291640",
        "name": "",
        "op1": "",
        "op2": "true",
        "op1type": "pay",
        "op2type": "bool",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "payload.timestamp",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "ad24532b.428f98"
            ]
        ]
    },
    {
        "id": "ad24532b.428f98",
        "type": "function",
        "z": "c9ea7ba5a2291640",
        "name": "Check Timestamp",
        "func": "if (!msg.hasOwnProperty('reset')) {\n    // Timestamp not reset, proceed with normal flow\n    return msg;\n} else {\n    // Timestamp reset, reset the delay in the Trigger node\n    return { reset: true };\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 160,
        "wires": [
            [
                "5e8a7a63.aa9c4c"
            ]
        ]
    },
    {
        "id": "5e8a7a63.aa9c4c",
        "type": "debug",
        "z": "c9ea7ba5a2291640",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 160,
        "wires": []
    },
    {
        "id": "50e98238.1663fc",
        "type": "inject",
        "z": "c9ea7ba5a2291640",
        "name": "Start Machine Cycle",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "509e6842.2e6d14"
            ]
        ]
    },
    {
        "id": "509e6842.2e6d14",
        "type": "function",
        "z": "c9ea7ba5a2291640",
        "name": "Store Start Time",
        "func": "flow.set(\"startTime\", Date.now());\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "a048245c.4d56b8"
            ]
        ]
    },
    {
        "id": "a048245c.4d56b8",
        "type": "delay",
        "z": "c9ea7ba5a2291640",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 490,
        "y": 260,
        "wires": [
            [
                "bda1e3d1.68b1b"
            ]
        ]
    },
    {
        "id": "bda1e3d1.68b1b",
        "type": "function",
        "z": "c9ea7ba5a2291640",
        "name": "Calculate Elapsed Time",
        "func": "var startTime = flow.get(\"startTime\");\nvar currentTime = Date.now();\nvar elapsedTime = currentTime - startTime;\nmsg.payload = elapsedTime;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 260,
        "wires": [
            [
                "1a1f00ae.c7e8ba"
            ]
        ]
    },
    {
        "id": "1a1f00ae.c7e8ba",
        "type": "switch",
        "z": "c9ea7ba5a2291640",
        "name": "Check Delay Time",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "5000",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 260,
        "wires": [
            [
                "db73f09f.90b0f8"
            ]
        ]
    },
    {
        "id": "db73f09f.90b0f8",
        "type": "function",
        "z": "c9ea7ba5a2291640",
        "name": "Turn Off Dust Collector",
        "func": "// Add code here to turn off the dust collector\nmsg.payload = \"Dust Collector Off\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 260,
        "wires": [
            []
        ]
    }
]