#line 1 "/Users/corywiegert/SynologyDrive/Automated Dust Collection/gitHub/DustCollection_OTA/DustCollection_OTA/Library/flows.json"
[
    {
        "id": "b3475eb191ac1338",
        "type": "tab",
        "label": "Gates",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dd58a77e5217ef71",
        "type": "tab",
        "label": "Dust Collector",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c9ea7ba5a2291640",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "21ee3988d339ed69",
        "type": "mqtt-broker",
        "name": "AnnapurnaNas",
        "broker": "192.168.0.73",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b86789de1bdbcc44",
        "type": "mqtt-broker",
        "name": "Synology Nas",
        "broker": "192.168.0.73",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bf7238885b8a1c84",
        "type": "blynk-iot-client",
        "name": "Table Saw",
        "path": "blynk.cloud",
        "key": "N9qc9REGzKrDi6TCghWX3uRmgNJdPhiJ",
        "tmpl": "\"TMPL24bXLC68L\"",
        "dbg_all": false,
        "dbg_log": false,
        "dbg_prop": false,
        "dbg_sync": false,
        "dbg_low": false,
        "dbg_pins": "",
        "multi_cmd": false,
        "enabled": true
    },
    {
        "id": "f6b3d5021b0a07d9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "AnnapurnaNas",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c5f6ba68a2e95fea",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "24ec13a33edb8bf5",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Tool ON",
        "topic": "Dust/Tool On",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "21ee3988d339ed69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 240,
        "wires": [
            [
                "70a31f474769ba38",
                "48df7358d5a4a2aa",
                "b6c1b6e504569d9b"
            ]
        ]
    },
    {
        "id": "70a31f474769ba38",
        "type": "mqtt out",
        "z": "b3475eb191ac1338",
        "name": "Run Gate Maps",
        "topic": "Dust/Run Gates",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "21ee3988d339ed69",
        "x": 240,
        "y": 280,
        "wires": []
    },
    {
        "id": "301d17151a9d5ee8",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Turn Dust Collector On",
        "func": "var outletVal = msg.payload.outlet;\nif (msg.payload && outletVal == true)\n    {\n        var spinDown = msg.payload.spinDown;\n        var sourceMachine = msg.payload.outlet;   \n        var sourceGate = msg.payload[\"sent Gate\"];\n        msg.payload = [];\n        msg.payload={\n            spinDown : spinDown,\n            machine  : sourceMachine,\n            gate     : sourceGate,\n            on       : true\n        };\n        msg.topic = \"Dust/Collector On\";\n    }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 240,
        "wires": [
            [
                "71b7d8d183fa5229",
                "9abf80db22291ba9"
            ]
        ]
    },
    {
        "id": "71b7d8d183fa5229",
        "type": "debug",
        "z": "b3475eb191ac1338",
        "name": "Before Turn On",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 720,
        "y": 240,
        "wires": []
    },
    {
        "id": "6bcb6d6ac3e30e81",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Request Gate Id's",
        "topic": "Dust/Gate ID",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "21ee3988d339ed69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 400,
        "wires": [
            [
                "fa6dd956d75cab7b"
            ]
        ]
    },
    {
        "id": "36756df51754d7e0",
        "type": "debug",
        "z": "b3475eb191ac1338",
        "name": "Add Gate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 400,
        "wires": []
    },
    {
        "id": "516d519db0a9f1b2",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Clear All Gates",
        "topic": "Dust/Clear All Gates",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "21ee3988d339ed69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 340,
        "wires": [
            [
                "4bb0a5abc7fb0a3e"
            ]
        ]
    },
    {
        "id": "4bb0a5abc7fb0a3e",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Reset Gates",
        "func": "flow.set ('gateIDs', []);\nmsg.payload = \"all gate ID's cleared from gateIDs\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 340,
        "wires": [
            [
                "ca49b808947fab0b"
            ]
        ]
    },
    {
        "id": "ca49b808947fab0b",
        "type": "debug",
        "z": "b3475eb191ac1338",
        "name": "clear Array",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "9abf80db22291ba9",
        "type": "link out",
        "z": "b3475eb191ac1338",
        "name": "Turn On Colllector",
        "mode": "link",
        "links": [
            "405144f764795253"
        ],
        "x": 655,
        "y": 200,
        "wires": []
    },
    {
        "id": "002db6db87b21a78",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Tool Off",
        "topic": "Dust/Tool Off",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "21ee3988d339ed69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 100,
        "wires": [
            [
                "aa023a75a7ddaa6b"
            ]
        ]
    },
    {
        "id": "89f9a3ed6a4802e5",
        "type": "link out",
        "z": "b3475eb191ac1338",
        "name": "Turn Off Collector",
        "mode": "link",
        "links": [
            "e03240742d738347"
        ],
        "x": 405,
        "y": 100,
        "wires": []
    },
    {
        "id": "aa023a75a7ddaa6b",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Turn Off Collector JSON",
        "func": "if (msg.payload.outlet == true) {\n    var spinDown = msg.payload.spinDown;\n    var sourceMachine = msg.payload.outlet;\n    var sourceGate = msg.payload[\"sent Gate\"];\n    var turnOffCollector = {\n        payload: {\n            spinDown: spinDown,\n            machine: sourceMachine,\n            gate: sourceGate,\n            on: true\n        },\n        topic: \"Dust/Collector Off\"\n    };\n}\nreturn turnOffCollector;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "89f9a3ed6a4802e5"
            ]
        ]
    },
    {
        "id": "c44703708c4e419c",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Create New GateID",
        "func": "// Get the sensor IDs array from context\nlet gateIDs = flow.get('gateIDs') || [];\n\n// Check if the array is not empty\nif (gateIDs.length > 0) {\n    // Use Math.max along with the spread operator to get the maximum value\n    let maxGateId = Math.max(...gateIDs);\n    msg.payload.gateId = maxGateId + 1; // Store the maximum sensor ID in the message payload\n    gateIDs.push(maxGateId + 1);\n    flow.set('gateIDIds', gateIDs);\n} else {\n    msg.payload.gateId = null; // No sensor IDs in the array, set the maximum ID to null\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "fa6dd956d75cab7b",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Add a gate to the Array",
        "func": "// Get the new sensor ID from the incoming message\nconst incomingGateId = msg.payload[\"gate_ID\"];\nconst incomingName = msg.payload [\"gate Name\"]\n\n// Get the existing sensor IDs array from context\n//let gateIDs = flow.get('gateIDs') || [];\nlet gateIDs = flow.get('gateIDs');\n// Check if the new sensor ID already exists in the array\nif (!gateIDs.includes(incomingGateId)) \n    {\n        gateIDs.push(incomingGateId);   // register the new gate to the array\n        flow.set('gateIDs', gateIDs); \n    }\nvar index = 0;\ndo {\n        node.warn (\"array values ==> \"+ gateIDs[index]);\n        index++;\n    } while (index < gateIDs.length);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('gateIDs', []);",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 400,
        "wires": [
            [
                "36756df51754d7e0"
            ]
        ]
    },
    {
        "id": "8252c6204099fe7c",
        "type": "inject",
        "z": "b3475eb191ac1338",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "7229ed5f124e0c1c"
            ]
        ]
    },
    {
        "id": "7229ed5f124e0c1c",
        "type": "mqtt out",
        "z": "b3475eb191ac1338",
        "name": "Ping gate Id's",
        "topic": "Dust/Send Gate ID",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "21ee3988d339ed69",
        "x": 380,
        "y": 600,
        "wires": [],
        "info": "This message is 13 characters long into the arduino\nit's length is calculated on the opic plus the payload\n"
    },
    {
        "id": "5da1e536d37c24ef",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Clear Gate",
        "topic": "Dust/Clear Gate",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "21ee3988d339ed69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 460,
        "wires": [
            [
                "a102a2c0b2827c23"
            ]
        ]
    },
    {
        "id": "a102a2c0b2827c23",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Clear Gate from Array",
        "func": "// Get the new sensor ID from the incoming message\nconst incomingGateId = msg.payload[\"gate_ID\"];\nconst incomingName = msg.payload [\"gate Name\"]\n\n// Get the existing sensor IDs array from context\nlet gateIDs = flow.get('gateIDs');\n// Check if the new sensor ID already exists in the array\nif (gateIDs.includes(incomingGateId)) \n    {\n        gateIDs = gateIDs.filter(id => id != incomingGateId );\n        flow.set('gateIDs', gateIDs);\n    }\nvar index = 0;\ndo {\n        node.warn (\"array values ==> \"+ gateIDs[index]);\n        index++;\n    } while (index < gateIDs.length);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 460,
        "wires": [
            [
                "e01f5480963b17ab"
            ]
        ]
    },
    {
        "id": "e01f5480963b17ab",
        "type": "debug",
        "z": "b3475eb191ac1338",
        "name": "Clear Gate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 460,
        "wires": []
    },
    {
        "id": "b6c1b6e504569d9b",
        "type": "debug",
        "z": "b3475eb191ac1338",
        "name": "outlet in message?",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.outlet",
        "statusType": "auto",
        "x": 250,
        "y": 180,
        "wires": []
    },
    {
        "id": "48df7358d5a4a2aa",
        "type": "json",
        "z": "b3475eb191ac1338",
        "name": "Convert to Json Object",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 270,
        "y": 240,
        "wires": [
            [
                "301d17151a9d5ee8"
            ]
        ]
    },
    {
        "id": "56ca2a31a038ef0d",
        "type": "comment",
        "z": "b3475eb191ac1338",
        "name": "work needed",
        "info": "modify the checking unique gate, just need to \ncheck if the value exists, if it does, find\nthe max value, adn increment by 1 and return\nthe value back to the arduino",
        "x": 490,
        "y": 280,
        "wires": []
    },
    {
        "id": "f7a159e5112c30ef",
        "type": "mqtt out",
        "z": "b3475eb191ac1338",
        "name": "Is Unique",
        "topic": "Dust/Is Unique",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "21ee3988d339ed69",
        "x": 900,
        "y": 600,
        "wires": []
    },
    {
        "id": "daccc1c4ec4c0f05",
        "type": "switch",
        "z": "b3475eb191ac1338",
        "name": "Did Gate Exist",
        "property": "exists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 540,
        "wires": [
            [
                "1ec018feb57e5c08"
            ],
            [
                "f7a159e5112c30ef"
            ]
        ]
    },
    {
        "id": "5ae78fd3cd3dfe76",
        "type": "function",
        "z": "b3475eb191ac1338",
        "name": "Checking Unique Gate",
        "func": "// Get the existing flow array from context\nlet gateIDs = flow.get('gateIDs');\nvar holder = msg.payload[\"holder\"];\nvar gateId = msg.payload[\"gate Id\"];\nnode.warn (\"value of holder == \" + holder);\nnode.warn (\"value of gateId ==> \" + gateId);\n\n// Check if the payload exists in the array\nif (!gateIDs.includes(gateId)) \n  {\n    node.warn(\"I am in a unique gate situation\");\n    gateIDs.push(gateId);   // register the new gate to the array\n    flow.set('gateIDs', gateIDs); \n    if (gateIDs.includes(holder))\n      {\n        gateIDs = gateIDs.filter(id => id != holder );\n        flow.set('gateIDs', gateIDs);\n      }\n    msg.exists = false;\n    \n  } else \n    {\n        gateIDs = gateIDs.filter(id => id != gateId );\n        let maxGateId = Math.max(...gateIDs);\n        msg.payload[\"gate Id\"] = maxGateId + 1; // Store the maximum sensor ID in the message payload\n        gateIDs.push(maxGateId + 1);\n        flow.set('gateIDs', gateIDs);\n        node.warn(\"I am in a non-unique gate situation\");\n        msg.exists = true;\n}\nvar index = 0;\ndo {\n        node.warn (\"array values ==> \"+ gateIDs[index]);\n        index++;\n    } while (index < gateIDs.length);\n\n// Pass the message to the next node in the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 540,
        "wires": [
            [
                "daccc1c4ec4c0f05"
            ]
        ]
    },
    {
        "id": "1ec018feb57e5c08",
        "type": "mqtt out",
        "z": "b3475eb191ac1338",
        "name": "Gate Exists",
        "topic": "Dust/Not Unique",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "21ee3988d339ed69",
        "x": 910,
        "y": 520,
        "wires": []
    },
    {
        "id": "8f1520a91c508d98",
        "type": "json",
        "z": "b3475eb191ac1338",
        "name": "Convert ",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 260,
        "y": 540,
        "wires": [
            [
                "5ae78fd3cd3dfe76"
            ]
        ]
    },
    {
        "id": "8694aa23cdfb275a",
        "type": "mqtt in",
        "z": "b3475eb191ac1338",
        "name": "Register Gate",
        "topic": "Dust/Register Gate",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "21ee3988d339ed69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 540,
        "wires": [
            [
                "8f1520a91c508d98"
            ]
        ]
    },
    {
        "id": "405144f764795253",
        "type": "link in",
        "z": "dd58a77e5217ef71",
        "name": "Start Dust Collector",
        "links": [
            "9abf80db22291ba9"
        ],
        "x": 125,
        "y": 40,
        "wires": [
            [
                "31508bd7934a9af5"
            ]
        ]
    },
    {
        "id": "9b27ec6fa7c5e18b",
        "type": "mqtt out",
        "z": "dd58a77e5217ef71",
        "name": "Start Dust Collector",
        "topic": "Dust/Collector On",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "21ee3988d339ed69",
        "x": 490,
        "y": 40,
        "wires": []
    },
    {
        "id": "31508bd7934a9af5",
        "type": "function",
        "z": "dd58a77e5217ef71",
        "name": "Set Spin Down for tool",
        "func": "flow.set (\"spinDown\", msg.payload.spindown);\nflow.set (\"start time\", Math.floor(Date.now() / 1000));\nflow.set (\"machine\",msg.payload.machine)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 40,
        "wires": [
            [
                "9b27ec6fa7c5e18b"
            ]
        ]
    },
    {
        "id": "de92937fbc1c09b0",
        "type": "mqtt out",
        "z": "dd58a77e5217ef71",
        "name": "Collector Off",
        "topic": "Dust/Collector Off",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "21ee3988d339ed69",
        "x": 670,
        "y": 120,
        "wires": []
    },
    {
        "id": "e03240742d738347",
        "type": "link in",
        "z": "dd58a77e5217ef71",
        "name": "Collector Off",
        "links": [
            "89f9a3ed6a4802e5"
        ],
        "x": 125,
        "y": 120,
        "wires": [
            [
                "edb437eb832792aa"
            ]
        ]
    },
    {
        "id": "edb437eb832792aa",
        "type": "function",
        "z": "dd58a77e5217ef71",
        "name": "Test Spin Down",
        "func": "if (flow.get(\"machine\") == null) \n  {\n    flow.set(\"machine\", msg.payload.machine);\n    if (flow.get(\"spinDown\") == null) \n      {\n        flow.set(\"spinDown\", msg.payload.spinDown);\n      }\n    flow.set(\"startTime\", Math.floor(Date.now() / 1000));\n  } else if (msg.payload.machine == flow.get(\"machine\")) \n      {\n        var currentTime = Math.floor(Date.now() / 1000);\n        var startTime = flow.get(\"startTime\");\n        var spinDown = flow.get(\"spinDown\");\n\n        if (currentTime - startTime > spinDown) \n          {\n            msg.delay = 0; // Trigger the delay immediately\n          } \n        else \n          {\n            msg.reset = true; // Reset the delay if conditions are not met\n            msg.delay = spinDown;\n          }\n      }\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 120,
        "wires": [
            [
                "d0586714416772f7"
            ]
        ]
    },
    {
        "id": "d0586714416772f7",
        "type": "trigger",
        "z": "dd58a77e5217ef71",
        "name": "Wait for spinDown",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "pay",
        "duration": "100",
        "extend": false,
        "overrideDelay": true,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 120,
        "wires": [
            [
                "de92937fbc1c09b0"
            ]
        ]
    },
    {
        "id": "3e4b7a95.5e6d7c",
        "type": "trigger",
        "z": "c9ea7ba5a2291640",
        "name": "",
        "op1": "",
        "op2": "true",
        "op1type": "pay",
        "op2type": "bool",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "payload.timestamp",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "ad24532b.428f98"
            ]
        ]
    },
    {
        "id": "ad24532b.428f98",
        "type": "function",
        "z": "c9ea7ba5a2291640",
        "name": "Check Timestamp",
        "func": "if (!msg.hasOwnProperty('reset')) {\n    // Timestamp not reset, proceed with normal flow\n    return msg;\n} else {\n    // Timestamp reset, reset the delay in the Trigger node\n    return { reset: true };\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 160,
        "wires": [
            [
                "5e8a7a63.aa9c4c"
            ]
        ]
    },
    {
        "id": "5e8a7a63.aa9c4c",
        "type": "debug",
        "z": "c9ea7ba5a2291640",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 160,
        "wires": []
    }
]